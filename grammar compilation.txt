export CLASSPATH="/mnt/c/Users/birik/github/SOGA4SSA/antlr-4.10.1-complete.jar:$CLASSPATH"
alias antlr4='java -jar /mnt/c/Users/birik/github/SOGA4SSA/antlr-4.10.1-complete.jar'
antlr4 -Dlanguage=Python3 SOGA.g4 -visitor -o ../src/python

# SOGA PARSER
    
## Add to UniformContext in SOGAParser + "import numpy as np"

def getText(self):
    """ converts string "uniform([a,b], K)" in "gm(pi, mu, sigma)" where gm is a Gaussian Mix with K component approximating the uniform"""
    a = float(self.list_().NUM()[0].getText())
    b = float(self.list_().NUM()[1].getText())
    N = int(self.NUM().getText())
    pi = [round(1.0/N,4)]*N
    mu = [round(a+i*(b-a)/N+((b-a)/(2*N)),4) for i in range(N)]
    sigma = list([round((b-a)/(np.sqrt(12)*N),4)]*N)
    return 'gm('+str(pi)+','+str(mu)+','+str(sigma)+')'
    
# ASGMT PARSER
    
## Add this to IddContext in ASGMTParser

def is_data(self, data):
    if self.IDV(0).getText() in data.keys():
        return True
    else:
        return False
   
    
def getValue(self, data):
    data_name = self.IDV(0).getText()
    if not self.NUM() is None:
        data_idx = int(self.NUM().getText())
    elif not self.IDV(1) is None:
        data_idx = data[self.IDV(1).getText()][0]
    return data[data_name][data_idx]
            
            
## Add this to SymvarsContext in ASGMTParser

def getVar(self, data):
    if self.idd() is None:
        return self.getText()
    else:
        if self.idd().IDV(1) is None:
            return self.getText()
        else:
            data_idx = data[self.idd().IDV(1).getText()][0]
        return self.idd().IDV(0).getText()+'['+str(data_idx)+']'
        
## Add this to TermContext is ASGMTParser

def is_var(self, data):
    """ Returns 1 if term is a variable, 0 if it's a constant """
    if not self.NUM() is None:
        return False
    elif not self.symvars() is None:
        if not self.symvars().IDV() is None:
            return True
        elif not self.symvars().idd() is None:
            if self.symvars().idd().is_data(data):
                return False
            else:
                return True
    elif not self.gm() is None:
        return True
    elif not self.poisson() is None:
        return True
    
def is_const(self, data):
    return not self.is_var(data)

def getValue(self, data):
    if self.is_const(data):
        if not self.NUM() is None:
            return float(self.NUM().getText())
        elif not self.symvars() is None:
            return self.symvars().idd().getValue(data)
    else:
        raise("Calling getValue for a variable")
    
# TRUNC PARSER

## Add this to VarContext
    
def _getText(self, data):
    if not self.idd() is None:
        return self.idd().getVar(data)
    else:
        return self.getText()

## Add this to IddContext

def getVar(self, data):
    if self.IDV(1) is None:
        return self.getText()
    else:
        data_idx = data[self.IDV(1).getText()][0]
        return self.IDV(0).getText()+'['+str(data_idx)+']'  
    
def getValue(self, data):
    data_name = self.IDV(0).getText()
    if not self.NUM() is None:
        data_idx = int(self.NUM().getText())
    elif not self.IDV(1) is None:
        data_idx = data[self.IDV(1).getText()][0]
    return data[data_name][data_idx]

            
